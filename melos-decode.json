{"files":[{"path":"{{project_name}}/codecov.yml","data":"codecov:\n  require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"70...100\"\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\n# excluding generated files and examples from the coverage report\nignore:\n  - \"**/example/\"\n  - \"examples\"\n  - \"**/*.g.dart\"\n  - \"**/*.freezed.dart\"\n\ncomment:\n  layout: \"reach,diff,flags,tree\"\n  behavior: default\n  require_changes: no","type":"text"},{"path":"{{project_name}}/tools/.gitkeep","data":"","type":"text"},{"path":"{{project_name}}/LICENSE","data":"MIT License\n\nCopyright (c) 2022 {{username}}\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.","type":"text"},{"path":"{{project_name}}/resources/icon/.gitkeep","data":"","type":"text"},{"path":"{{project_name}}/website/.gitkeep","data":"","type":"text"},{"path":"{{project_name}}/README.md","data":"# {{project_name}}\n\n\n\n[![build: status][actions_badge]][actions_link]\n[![pub package][pub_badge]][pub_link]\n[![style: analysis][analysis_badge]][analysis_link]\n[![License: MIT][license_badge]][license_link]\n\n[actions_badge]: https://github.com/huang12zheng/{{project_name}}/actions/workflows/main.yaml/badge.svg\n[actions_link]: https://github.com/huang12zheng/{{project_name}}/actions/workflows/main.yaml\n[pub_badge]:https://img.shields.io/pub/v/{{project_name}}.svg\n[pub_link]:https://pub.dartlang.org/packages/{{project_name}}\n[license_badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[license_link]: https://opensource.org/licenses/MIT\n[analysis_badge]: https://img.shields.io/badge/style-romantic__analysis-purple\n[analysis_link]: https://github.com/RomanticEra/romantic_analysis\n\n---\n\n{{description}}\n\n<!-- For learning how to use [{{project_name}}], see its documentation: https://{{project_name}}.dev -->\n\nLong story short:\n\n- Declare your global variables:\n\n  ```dart\n  ```\n\n- Use them inside your code.\n\n  ```dart\n  ```\n\nSee the [FAQ](#FAQ) if you have questions about what this means for [provider].\n\n<!-- #toc -->\n\n\n## Motivation\n\n## Contributing\n\nContributions are welcomed!\n\nHere is a curated list of how you can help:\n\n- Report bugs and scenarios that are difficult to implement\n- Report parts of the documentation that are unclear\n- Update the documentation / add examples\n- Implement new features by making a pull-request\n\n## FAQ\n","type":"text"},{"path":"{{project_name}}/ROADMAP.md","data":"# Roadmap\n\n## {{project_name}}\n\n## Examples\n\n### Marvel\n\n### Introduction screen\n\n## {{project_name}}.dev\n\n- Testing\n- How it works\n- fundamentals\n- talks and articles\n- FAQ\n- cookbooks:\n- DO/DON'T\n\n## Linter:\n\n\n## Devtool:\n\n","type":"text"},{"path":"{{project_name}}/.gitignore","data":"pubspec.lock\n\n# Ignoring generated files, as they pollute pull requests and can create merge conflicts\n*.g.dart\n*.freezed.dart\n!packages/*/lib/**/*.freezed.dart\n\n# Ignoring native folders of the example as they can be re-generated easily\n**/example/android/\n**/example/ios/\n**/example/web/\nexamples/**/android/\nexamples/**/ios/\nexamples/**/web/\nexamples/**/macos/\n\n# Miscellaneous\ncoverage/\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\ncoverage.lcov\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Web related\nlib/generated_plugin_registrant.dart\n\n# Exceptions to above rules.\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n","type":"text"},{"path":"{{project_name}}/melos.yaml","data":"name: my_project\n\npackages:\n  - packages/**\n  - examples/**\n\nscripts:\n  # we voluntarily do not use melos inside goldens\n  postbootstrap: |\n    postbootstrap: tuneup --version || pub global activate tuneup\n\n  analyze:\n    run: |\n      melos exec -c 1 -- \\\n        flutter analyze .\n    description: |\n      Run `dart analyze` in all packages.\n       - Note: you can also rely on your IDEs Dart Analysis / Issues window.\n\n  generate:\n    run: melos run generate:dart && melos run generate:flutter\n    description: Build all generated files for Dart & Flutter packages in this project.\n\n  generate:dart:\n    run: melos exec -c 1 --depends-on=\"build_runner\" --no-flutter -- \"dart run build_runner build --delete-conflicting-outputs\"\n    description: Build all generated files for Dart packages in this project.\n\n  generate:flutter:\n    run: melos exec -c 1 --depends-on=\"build_runner\" --flutter -- \"flutter pub run build_runner build --delete-conflicting-outputs\"\n    description: Build all generated files for Flutter packages in this project.\n\n  test:\n    run: melos run test:dart --no-select && melos run test:flutter --no-select\n    description: Run all Dart & Flutter tests in this project.\n\n  test:dart:\n    run: melos exec  -c 1 --fail-fast -- \"\\$MELOS_ROOT_PATH/scripts/coverage.sh\"\n    description: Run Dart tests for a specific package in this project.\n    select-package:\n      flutter: false\n      dir-exists: test\n\n  test:flutter:\n    run: melos exec --dir-exists=\"test\" -c 1 --fail-fast -- \"flutter test --coverage\"\n    description: Run Flutter tests for a specific package in this project.\n    select-package:\n      flutter: true\n      dir-exists: test","type":"text"},{"path":"{{project_name}}/examples/.gitkeep","data":"","type":"text"},{"path":"{{project_name}}/benchmarks/README.md","data":"A list of benchmarks to measure the different aspects of {{project_name}}\n\nTo run a benchmark, run:\n\n```sh\nflutter run --release -t lib/some_benchmark.dart\n```\n","type":"text"},{"path":"{{project_name}}/benchmarks/pubspec.yaml","data":"name: benchmarks\ndescription: A new Flutter project.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\nversion: 1.0.0+1\n\nenvironment:\n  sdk: \">=2.12.0-0 <3.0.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  romantic_common:\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  romantic_analysis:\n\n# dependency_overrides:\n#   {{project_name}}:\n#     path: ../packages/{{project_name}}","type":"text"},{"path":"{{project_name}}/benchmarks/.gitignore","data":"/android\n/ios\n/web\n/macos\n\n# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n**/ios/Flutter/.last_build_id\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\n/build/\n\n# Web related\nlib/generated_plugin_registrant.dart\n\n# Symbolication related\napp.*.symbols\n\n# Obfuscation related\napp.*.map.json\n","type":"text"},{"path":"{{project_name}}/benchmarks/lib/main.dart","data":"// import 'add_listener.dart' as add_listener;\n\nvoid main() {\n  // create.main();\n}\n","type":"text"},{"path":"{{project_name}}/benchmarks/lib/common.dart","data":"// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'dart:convert' show json;\n\n/// This class knows how to format benchmark results for machine and human\n/// consumption.\n///\n\n/// Example:\n///\n///     BenchmarkResultPrinter printer = new BenchmarkResultPrinter();\n///     printer.add(\n///       description: 'Average frame time',\n///       value: averageFrameTime,\n///       unit: 'ms',\n///       name: 'average_frame_time',\n///     );\n///     printer.printToStdout();\n///\nclass BenchmarkResultPrinter {\n  final List<_BenchmarkResult> _results = <_BenchmarkResult>[];\n\n  /// Adds a benchmark result to the list of results.\n  ///\n  /// [description] is a human-readable description of the result. [value] is a\n  /// result value. [unit] is the unit of measurement, such as \"ms\", \"km\", \"h\".\n  /// [name] is a computer-readable name of the result used as a key in the JSON\n  /// serialization of the results.\n  void addResult({\n    required String description,\n    required double value,\n    required String unit,\n    required String name,\n  }) {\n    _results.add(_BenchmarkResult(description, value, unit, name));\n  }\n\n  /// Prints the results added via [addResult] to standard output, once as JSON\n  /// for computer consumption and once formatted as plain text for humans.\n  void printToStdout() {\n    // IMPORTANT: keep these values in sync with dev/devicelab/bin/tasks/microbenchmarks.dart\n    const jsonStart = '================ RESULTS ================';\n    const jsonEnd = '================ FORMATTED ==============';\n    const jsonPrefix = ':::JSON:::';\n\n    print(jsonStart);\n    print('$jsonPrefix ${_printJson()}');\n    print(jsonEnd);\n    print(_printPlainText());\n  }\n\n  String _printJson() {\n    final results = <String, double>{};\n    for (final result in _results) {\n      results[result.name] = result.value;\n    }\n    return json.encode(results);\n  }\n\n  String _printPlainText() {\n    final buf = StringBuffer();\n    for (final result in _results) {\n      buf.writeln(\n        '${result.description}: '\n        '${result.value.toStringAsFixed(1)} ${result.unit}',\n      );\n    }\n    return buf.toString();\n  }\n}\n\nclass _BenchmarkResult {\n  _BenchmarkResult(this.description, this.value, this.unit, this.name);\n\n  /// Human-readable description of the result, e.g. \"Average frame time\".\n  final String description;\n\n  /// Result value that in agreement with [unit].\n  final double value;\n\n  /// Unit of measurement that is in agreement with [value].\n  final String unit;\n\n  /// Computer-readable name of the result.\n  final String name;\n}\n","type":"text"},{"path":"{{project_name}}/benchmarks/analysis_options.yaml","data":"include: package:romantic_analysis/analysis_options.yaml\nlinter:\n  rules:\n    # Our example actually wants to print to the console\n    avoid_print: false\n\n    # Not necessary for examples\n    public_member_api_docs: false\n","type":"text"},{"path":"{{project_name}}/scripts/test_all.sh","data":"BASEDIR=$(dirname \"$0\")\n\ncd $BASEDIR/../packages/{{project_name}}\ndart test","type":"text"},{"path":"{{project_name}}/scripts/coverage.sh","data":"#!/bin/bash\n\n# Fast fail the script on failures.\nset -e\n\ndart pub global activate coverage\n\ndart test --coverage=\"coverage\"\n\nformat_coverage --lcov --in=coverage --out=coverage.lcov --packages=.packages --report-on=lib --check-ignore","type":"text"},{"path":"{{project_name}}/packages/.gitkeep","data":"","type":"text"},{"path":"{{project_name}}/.github/workflows/build.yml","data":"name: Build\n\non:\n  push:\n  pull_request:\n  schedule:\n    # runs the CI everyday at 10AM\n    - cron: \"0 10 * * *\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        channel:\n          - dev\n          # - stable\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: subosito/flutter-action@v1\n        with:\n          channel: ${{ matrix.channel }}\n\n      - name: Add pub cache bin to PATH\n        run: echo \"$HOME/.pub-cache/bin\" >> $GITHUB_PATH\n\n      - name: Add pub cache to PATH\n        run: echo \"PUB_CACHE=\"$HOME/.pub-cache\"\" >> $GITHUB_ENV\n\n      - run: dart pub global activate melos\n\n      - name: Install dependencies\n        run: melos bootstrap\n\n      - name: Check format\n        run: flutter format --set-exit-if-changed .\n\n      - name: Generate (dart)\n        run: melos exec --depends-on=\"build_runner\" --no-flutter -- \"dart run build_runner build --delete-conflicting-outputs\"\n\n      # - name: Generate (flutter)\n      #   run: |\n      #     cd examples/stackoverflow && flutter pub run build_runner build --delete-conflicting-outputs && cd - \n      #     cd examples/marvel && flutter pub run build_runner build --delete-conflicting-outputs && cd - \n      #     cd examples/todos && flutter pub run build_runner build --delete-conflicting-outputs\n\n      - name: Analyze\n        run: melos exec --ignore=\"marvel\" --ignore=\"codemod_{{project_name}}_test*\" -- \"flutter analyze\"\n\n      - name: Run tests\n        run: melos run test\n\n      - name: Upload coverage to codecov\n        run: curl -s https://codecov.io/bash | bash\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/revert.md","data":"---\nname: Revert Commit\nabout: Reverts a previous commit\ntitle: \"revert: \"\nlabels: revert\n---\n\n**Description**\n\nProvide a link to a PR/Commit that you are looking to revert and why.\n\n**Requirements**\n\n- [ ] Change has been reverted\n- [ ] No change in test coverage has happened\n- [ ] A new ticket is created for any follow on work that needs to happen\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/example_request.md","data":"---\nname: Documentation improvement request\nabout: >-\n  Suggest a new example/documentation or ask for clarification about an\n  existing one.\ntitle: \"\"\nlabels: documentation, needs triage\n---\n\n**Describe what scenario you think is uncovered by the existing examples/articles**\nA clear and concise description of the problem that you want explained.\n\n**Describe why existing examples/articles do not cover this case**\nExplain which examples/articles you have seen before making this request, and\nwhy they did not help you with your problem.\n\n**Additional context**\nAdd any other context or screenshots about the documentation request here.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/feature_request.md","data":"---\nname: Feature Request\nabout: A new feature to be added to the project\ntitle: \"feat: \"\nlabels: feature\n---\n\n**Description**\n\nClearly describe what you are looking to add. The more context the better.\n\n**Requirements**\n\n- [ ] Checklist of requirements to be fulfilled\n\n**Additional Context**\n\nAdd any other context or screenshots about the feature request go here.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/bug_report.md","data":"---\nname: Bug Report\nabout: Create a report to help us improve\ntitle: \"fix: \"\nlabels: bug\n---\n\n**Description**\nA clear and concise description of what the bug is.\n\n**Steps To Reproduce**\n\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n**Expected Behavior**\nA clear and concise description of what you expected to happen.\n\n**Screenshots**\nIf applicable, add screenshots to help explain your problem.\n\n**Additional Context**\nAdd any other context about the problem here.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/performance.md","data":"---\nname: Performance Update\nabout: A code change that improves performance\ntitle: \"perf: \"\nlabels: performance\n---\n\n**Description**\n\nClearly describe what code needs to be changed and what the performance impact is going to be. Bonus point's if you can tie this directly to user experience.\n\n**Requirements**\n\n- [ ] There is no drop in test coverage.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/refactor.md","data":"---\nname: Refactor\nabout: A code change that neither fixes a bug nor adds a feature\ntitle: \"refactor: \"\nlabels: refactor\n---\n\n**Description**\n\nClearly describe what needs to be refactored any why. Please provide links to related issues (bugs or upcoming features) in order to help prioritize.\n\n**Requirements**\n\n- [ ] There is no drop in test coverage.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/style.md","data":"---\nname: Style Changes\nabout: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\ntitle: \"style: \"\nlabels: style\n---\n\n**Description**\n\nClearly describe what you are looking to change and why.\n\n**Requirements**\n\n- [ ] There is no drop in test coverage.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/build.md","data":"---\nname: Build System\nabout: Changes that affect the build system or external dependencies\ntitle: \"build: \"\nlabels: build\n---\n\n**Description**\n\nDescribe what changes need to be done to the build system and why\n\n**Requirements**\n\n- [ ] The build system is passing\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/chore.md","data":"---\nname: Chore\nabout: Other changes that don't modify src or test files\ntitle: \"chore: \"\nlabels: chore\n---\n\n**Description**\n\nClearly describe what change is needed and why. If this changes code then please use another issue type.\n\n**Requirements**\n\n- [ ] No functional changes to the code\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/config.yml","data":"blank_issues_enabled: false","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/documentation.md","data":"---\nname: Documentation\nabout: Improve the documentation so all collaborators have a common understanding\ntitle: \"docs: \"\nlabels: documentation\n---\n\n**Description**\n\nClearly describe what documentation you are looking to add or improve.\n\n**Requirements**\n\n- [ ] Requirements go here\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/test.md","data":"---\nname: Test\nabout: Adding missing tests or correcting existing tests\ntitle: \"test: \"\nlabels: test\n---\n\n**Description**\n\nList out the tests that need to be added or changed. Please also include any information as to why this was not covered in the past.\n\n**Requirements**\n\n- [ ] There is no drop in test coverage.\n","type":"text"},{"path":"{{project_name}}/.github/ISSUE_TEMPLATE/ci.md","data":"---\nname: Continuous Integration\nabout: Changes to the CI configuration files and scripts\ntitle: \"ci: \"\nlabels: ci\n---\n\n**Description**\n\nDescribe what changes need to be done to the ci/cd system and why\n\n**Requirements**\n\n- [ ] The ci system is passing\n","type":"text"}],"hooks":[],"name":"melos","description":"A new brick created with the Mason CLI.","vars":["username","project_name","description"]}